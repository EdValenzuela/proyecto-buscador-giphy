{"version":3,"sources":["serviceWorker.js","components/GifAdd.js","helpers/getGifs.js","components/GifItemGrid.js","components/GifItem.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","GifAdd","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","catg","console","log","htmlFor","className","type","placeholder","id","autoComplete","value","onChange","target","getGif","categ","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_still","GifItemGrid","style","src","alt","GifItem","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","disabled","role","aria-hidden","item","key","GifExpertApp","categorias","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.8e3eddb7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifAdd = ({setCategorias}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    /* declarando el setInputValue en el onChange declaramos\r\n    que siempre estara actualizado nuestro input con lo ultimo que escribio \r\n    el usuario */\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 1){\r\n            setCategorias( catg => [inputValue,...catg]);\r\n            setInputValue('');\r\n        }\r\n        console.log('Submit Hecho');\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label htmlFor=\"gif\">Nombre del Gif</label>\r\n            <input \r\n                className=\"form-control form-control-lg\" \r\n                type=\"text\" \r\n                placeholder=\"Tu gif\"\r\n                id=\"gif\"\r\n                autoComplete=\"off\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />  \r\n        </form>\r\n    )\r\n}\r\n\r\nGifAdd.propTypes = {\r\n    setCategorias : PropTypes.func.isRequired\r\n}\r\n","export const getGif = async (categ)=>{\r\n    try {\r\n        const api = 's6Tmwoqj3IHhMsEEzuQs2E4tCKauvT4G';\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categ)}&limit=10&api_key=${api}`;\r\n\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n        \r\n        console.log(data);\r\n        const gifs = data.map( img =>{\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_still.url\r\n            } \r\n        })\r\n        console.log(gifs);\r\n        return gifs;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React from 'react'\r\n\r\nexport const GifItemGrid = ({title, url}) => {\r\n    return (\r\n        <div className=\"card border-dark bg-light m-2 animate__animated animate__fadeIn\" style={{'width': '18rem'}}>\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">\r\n                    {title}\r\n                </h5>\r\n            </div>\r\n            <img src={url} className=\"p-3 card-img-top img-fluid\" alt={title}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifItemGrid } from './GifItemGrid';\r\n//import { getGif } from '../helpers/getGifs';\r\n\r\nexport const GifItem = ({categ}) => {\r\n\r\n    const {data:img, loading} = useFetchGifs(categ);\r\n\r\n    \r\n    /* const [img, setImg] = useState([])\r\n\r\n    */\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"mt-5\"> {categ} </h3>\r\n\r\n        {\r\n        loading &&\r\n            <button className=\"btn btn-danger animate__animated animate__flash\" type=\"button\" disabled>\r\n                <span className=\"spinner-border spinner-border-sm mx-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n                Loading...\r\n            </button> \r\n        }\r\n\r\n        {<div className=\"row d-inline-flex\">\r\n            {\r\n                img.map( (item) =>{\r\n                   return <GifItemGrid key={item.id} {...item}/> \r\n                })\r\n            }\r\n        </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGif } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (categ) => {\r\n    \r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGif(categ)\r\n            .then( imgs => {\r\n                setTimeout( () =>{\r\n                    setstate({\r\n                        data : imgs,\r\n                        loading: false\r\n                    });    \r\n                }, 500 );\r\n            });\r\n    }, [categ]) //se ejecuta cada vez que cambie la categoria\r\n\r\n    return state;\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport { GifAdd } from './GifAdd';\r\nimport { GifItem } from './GifItem';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categorias, setCategorias] = useState(['Dragon Ball Z']);\r\n\r\n    /*const handleAdd = () =>{\r\n        setCategorias([...categorias, 'Dragon ball']);\r\n    }*/\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <h2 className=\"mb-5\">Buscador de Giphy</h2>    \r\n            \r\n            <GifAdd setCategorias={setCategorias}/>\r\n                {\r\n                    categorias.map( categ =>{\r\n                        return <GifItem \r\n                                    key={categ} \r\n                                    categ={categ}\r\n                                /> \r\n                    })\r\n                }      \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { GifExpertApp } from './components/GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}